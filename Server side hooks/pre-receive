#!/bin/bash

################################################################################################
# Pre-receive Hook coté serveur.
# Utilité: Le script detecte un push arrivant et vérifie la convention de nommage.
# Usage: Automatique avec Git.
# Auteur: Gerhard Eibl (DevOps)
# Mise à jour le: 15/03/2022
# Version : 3.0
################################################################################################

while read oldsha newsha refname; do

    commit=$(git rev-list $newsha --not --all)
    oldcommit=$(git rev-list $oldsha --not --all)
    refname=$(git rev-list $refname --not --all)
    subject=$(git show -s --format=%B $commit)

    echo "newsha: $newsha"
    echo $(git show -s --format=%B $commit)
    echo "oldsha: $oldsha"
    echo $(git show -s --format=%B $oldcommit)
    echo "refname: $refname"
    echo $(git show -s --format=%B $refname)

    REGEX="(^(feat|fix|ci|perf|revert|docs|style|refactor|test|chore|wip|version|build|git|merge))(\([a-zA-Z0-9]+\))?: [a-zA-Z0-9].+"

    REGEX_DELETE="0000000000000000000000000000000000000000"

    RED="\e[31m"
    GREEN="\e[32m"
    BLUE="\e[34m"
    ENDCOLOR="\e[0m"

    if [[ $newsha =~ $REGEX_DELETE ]]; then
        echo -e "${BLUE}Branche éliminée avec succès.${ENDCOLOR}"
    fi

    if [[ $subject =~ $REGEX ]]; then
        echo -e "${GREEN}Votre push est accepté, cordialement, votre DevOps.${ENDCOLOR}"
    else
        echo -e "${RED}Votre push est refusé, vérifiez la syntaxe de votre commit, cordialement, votre DevOps.${ENDCOLOR}"
        echo -e "${RED}Pour refaire votre commit sans perdre vos staged jobs tapez la commande: git reset --soft HEAD~ ${ENDCOLOR}"
        exit 1
    fi
done
